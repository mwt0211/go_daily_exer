// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: person/person.proto

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	SearchPerson(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error)
	SearchPersonReqStream(ctx context.Context, opts ...grpc.CallOption) (PersonService_SearchPersonReqStreamClient, error)
	SearchPersonResStream(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (PersonService_SearchPersonResStreamClient, error)
	SearchPersonBothStream(ctx context.Context, opts ...grpc.CallOption) (PersonService_SearchPersonBothStreamClient, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) SearchPerson(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error) {
	out := new(PersonResponse)
	err := c.cc.Invoke(ctx, "/person.PersonService/searchPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) SearchPersonReqStream(ctx context.Context, opts ...grpc.CallOption) (PersonService_SearchPersonReqStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[0], "/person.PersonService/searchPersonReqStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceSearchPersonReqStreamClient{stream}
	return x, nil
}

type PersonService_SearchPersonReqStreamClient interface {
	Send(*PersonRequest) error
	CloseAndRecv() (*PersonResponse, error)
	grpc.ClientStream
}

type personServiceSearchPersonReqStreamClient struct {
	grpc.ClientStream
}

func (x *personServiceSearchPersonReqStreamClient) Send(m *PersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceSearchPersonReqStreamClient) CloseAndRecv() (*PersonResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) SearchPersonResStream(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (PersonService_SearchPersonResStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[1], "/person.PersonService/searchPersonResStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceSearchPersonResStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_SearchPersonResStreamClient interface {
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personServiceSearchPersonResStreamClient struct {
	grpc.ClientStream
}

func (x *personServiceSearchPersonResStreamClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) SearchPersonBothStream(ctx context.Context, opts ...grpc.CallOption) (PersonService_SearchPersonBothStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[2], "/person.PersonService/searchPersonBothStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceSearchPersonBothStreamClient{stream}
	return x, nil
}

type PersonService_SearchPersonBothStreamClient interface {
	Send(*PersonRequest) error
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personServiceSearchPersonBothStreamClient struct {
	grpc.ClientStream
}

func (x *personServiceSearchPersonBothStreamClient) Send(m *PersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceSearchPersonBothStreamClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	SearchPerson(context.Context, *PersonRequest) (*PersonResponse, error)
	SearchPersonReqStream(PersonService_SearchPersonReqStreamServer) error
	SearchPersonResStream(*PersonRequest, PersonService_SearchPersonResStreamServer) error
	SearchPersonBothStream(PersonService_SearchPersonBothStreamServer) error
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) SearchPerson(context.Context, *PersonRequest) (*PersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPerson not implemented")
}
func (UnimplementedPersonServiceServer) SearchPersonReqStream(PersonService_SearchPersonReqStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchPersonReqStream not implemented")
}
func (UnimplementedPersonServiceServer) SearchPersonResStream(*PersonRequest, PersonService_SearchPersonResStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchPersonResStream not implemented")
}
func (UnimplementedPersonServiceServer) SearchPersonBothStream(PersonService_SearchPersonBothStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchPersonBothStream not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_SearchPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SearchPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/searchPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SearchPerson(ctx, req.(*PersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_SearchPersonReqStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).SearchPersonReqStream(&personServiceSearchPersonReqStreamServer{stream})
}

type PersonService_SearchPersonReqStreamServer interface {
	SendAndClose(*PersonResponse) error
	Recv() (*PersonRequest, error)
	grpc.ServerStream
}

type personServiceSearchPersonReqStreamServer struct {
	grpc.ServerStream
}

func (x *personServiceSearchPersonReqStreamServer) SendAndClose(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceSearchPersonReqStreamServer) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonService_SearchPersonResStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).SearchPersonResStream(m, &personServiceSearchPersonResStreamServer{stream})
}

type PersonService_SearchPersonResStreamServer interface {
	Send(*PersonResponse) error
	grpc.ServerStream
}

type personServiceSearchPersonResStreamServer struct {
	grpc.ServerStream
}

func (x *personServiceSearchPersonResStreamServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_SearchPersonBothStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).SearchPersonBothStream(&personServiceSearchPersonBothStreamServer{stream})
}

type PersonService_SearchPersonBothStreamServer interface {
	Send(*PersonResponse) error
	Recv() (*PersonRequest, error)
	grpc.ServerStream
}

type personServiceSearchPersonBothStreamServer struct {
	grpc.ServerStream
}

func (x *personServiceSearchPersonBothStreamServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceSearchPersonBothStreamServer) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "person.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchPerson",
			Handler:    _PersonService_SearchPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "searchPersonReqStream",
			Handler:       _PersonService_SearchPersonReqStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "searchPersonResStream",
			Handler:       _PersonService_SearchPersonResStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "searchPersonBothStream",
			Handler:       _PersonService_SearchPersonBothStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "person/person.proto",
}
